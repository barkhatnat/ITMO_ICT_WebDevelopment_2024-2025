{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0411\u0430\u0440\u0445\u0430\u0442\u043e\u0432\u0430 \u041d\u0430\u0442\u0430\u043b\u044c\u044f \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u043d\u0430 \u041a3339","title":"Home"},{"location":"lab1/task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0421\u0442\u0435\u043a: \u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\task_1\\src\\main\\java\\ru\\barkhatnat \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 cd server javac ServerUdp.java java ServerUdp.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 ) \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 cd client javac ClientUdp.java java ClientUdp.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 ) \u041a\u043e\u0434 public class ClientUdp { private static final int BUFFER_SIZE = 1024; public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (DatagramSocket clientSocket = new DatagramSocket()) { InetAddress serverAddress = InetAddress.getByName(address); String message = \"Hello, server\"; byte[] sendData = message.getBytes(); DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, serverAddress, port); clientSocket.send(sendPacket); System.out.println(\"\u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443\"); byte[] receiveData = new byte[BUFFER_SIZE]; DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length); clientSocket.receive(receivePacket); String messageFromServer = new String(receivePacket.getData(), 0, receivePacket.getLength()); System.out.println(\"\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: \" + messageFromServer); } catch (Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } } public class ServerUdp { private static final int BUFFER_SIZE = 1024; public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (DatagramSocket serverSocket = new DatagramSocket(port, InetAddress.getByName(address))) { System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 \" + port); while (true) { byte[] receiveData = new byte[BUFFER_SIZE]; DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length); serverSocket.receive(receivePacket); String messageFromClient = new String(receivePacket.getData(), 0, receivePacket.getLength()); System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: \" + messageFromClient); String response = \"Hello, client\"; byte[] sendData = response.getBytes(); InetAddress clientAddress = receivePacket.getAddress(); int clientPort = receivePacket.getPort(); DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, clientAddress, clientPort); serverSocket.send(sendPacket); System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043d\u0430 \" + clientAddress + \":\" + clientPort); } } catch (Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } }","title":"Task 1"},{"location":"lab1/task1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab1/task1/#_2","text":"\u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP","title":"\u0421\u0442\u0435\u043a:"},{"location":"lab1/task1/#_3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\task_1\\src\\main\\java\\ru\\barkhatnat \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 cd server javac ServerUdp.java java ServerUdp.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 ) \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 cd client javac ClientUdp.java java ClientUdp.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 )","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443"},{"location":"lab1/task1/#_4","text":"public class ClientUdp { private static final int BUFFER_SIZE = 1024; public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (DatagramSocket clientSocket = new DatagramSocket()) { InetAddress serverAddress = InetAddress.getByName(address); String message = \"Hello, server\"; byte[] sendData = message.getBytes(); DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, serverAddress, port); clientSocket.send(sendPacket); System.out.println(\"\u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443\"); byte[] receiveData = new byte[BUFFER_SIZE]; DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length); clientSocket.receive(receivePacket); String messageFromServer = new String(receivePacket.getData(), 0, receivePacket.getLength()); System.out.println(\"\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: \" + messageFromServer); } catch (Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } } public class ServerUdp { private static final int BUFFER_SIZE = 1024; public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (DatagramSocket serverSocket = new DatagramSocket(port, InetAddress.getByName(address))) { System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 \" + port); while (true) { byte[] receiveData = new byte[BUFFER_SIZE]; DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length); serverSocket.receive(receivePacket); String messageFromClient = new String(receivePacket.getData(), 0, receivePacket.getLength()); System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: \" + messageFromClient); String response = \"Hello, client\"; byte[] sendData = response.getBytes(); InetAddress clientAddress = receivePacket.getAddress(); int clientPort = receivePacket.getPort(); DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, clientAddress, clientPort); serverSocket.send(sendPacket); System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043d\u0430 \" + clientAddress + \":\" + clientPort); } } catch (Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } }","title":"\u041a\u043e\u0434"},{"location":"lab1/task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u0421\u0442\u0435\u043a: \u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net, io \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\task_2\\src\\main\\java\\ru\\barkhatnat \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 cd server javac ServerTcp.java java ServerTcp.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 ) \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 cd client javac ClientTcp.java java ClientTcp.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 ) \u041a\u043e\u0434 public class ClientTcp { public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (Socket clientSocket = new Socket(address, port); BufferedReader clientInput = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); BufferedWriter clientOutput = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream())); BufferedReader consoleReader = new BufferedReader(new InputStreamReader(System.in))) { System.out.println(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043d\u0430: \" + address + \":\" + port); System.out.println(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u0441\u043e\u0442\u0443 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b\"); String data = consoleReader.readLine(); clientOutput.write(data + \"\\n\"); clientOutput.flush(); System.out.println(\"\u041e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:\"); String serverResponse; while ((serverResponse = clientInput.readLine()) != null) { System.out.println(serverResponse); } } catch (IOException e) { System.err.printf(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (%s:%d): %s\", address, port, e.getMessage()); } } } public class ServerTcp { public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (ServerSocket serverSocket = new ServerSocket(port, 0, InetAddress.getByName(address));) { System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 \" + port); while (true) { try (Socket clientSocket = serverSocket.accept(); BufferedReader serverInput = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); BufferedWriter serverOutput = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()))) { System.out.println(\"\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0438\u0435\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u0441 \u043f\u043e\u0440\u0442\u0430 \" + port); String data = serverInput.readLine(); System.out.println(\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: \" + data); String response = processInput(data); serverOutput.write(response); serverOutput.flush(); } } } catch (IOException e) { System.err.printf(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (%s:%d): %s\", address, port, e.getMessage()); } catch (Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } private static String processInput(String data) { StringBuilder response = new StringBuilder(); try { String[] arguments = data.split(\" \"); if (arguments.length < 3) { return \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f 3 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\\n\"; } if (arguments.length > 3) { return \"\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f 3 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\\n\"; } float base1 = Float.parseFloat(arguments[0]); float base2 = Float.parseFloat(arguments[1]); float height = Float.parseFloat(arguments[2]); float result = (base1 + base2) * 0.5f * height; response.append(\"\u041e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 1: \").append(arguments[0]).append(\"\\n\") .append(\"\u041e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 2: \").append(arguments[1]).append(\"\\n\") .append(\"\u0412\u044b\u0441\u043e\u0442\u0430: \").append(arguments[2]).append(\"\\n\") .append(\"\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438: \").append(result).append(\"\\n\"); } catch (NumberFormatException e) { return \"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043a \u0447\u0438\u0441\u043b\u0443\\n\"; } return response.toString(); } }","title":"Task 2"},{"location":"lab1/task2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab1/task2/#_2","text":"\u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net, io \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP","title":"\u0421\u0442\u0435\u043a:"},{"location":"lab1/task2/#_3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\task_2\\src\\main\\java\\ru\\barkhatnat \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 cd server javac ServerTcp.java java ServerTcp.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 ) \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 cd client javac ClientTcp.java java ClientTcp.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 )","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443"},{"location":"lab1/task2/#_4","text":"public class ClientTcp { public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (Socket clientSocket = new Socket(address, port); BufferedReader clientInput = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); BufferedWriter clientOutput = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream())); BufferedReader consoleReader = new BufferedReader(new InputStreamReader(System.in))) { System.out.println(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043d\u0430: \" + address + \":\" + port); System.out.println(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u0441\u043e\u0442\u0443 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b\"); String data = consoleReader.readLine(); clientOutput.write(data + \"\\n\"); clientOutput.flush(); System.out.println(\"\u041e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:\"); String serverResponse; while ((serverResponse = clientInput.readLine()) != null) { System.out.println(serverResponse); } } catch (IOException e) { System.err.printf(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (%s:%d): %s\", address, port, e.getMessage()); } } } public class ServerTcp { public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (ServerSocket serverSocket = new ServerSocket(port, 0, InetAddress.getByName(address));) { System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 \" + port); while (true) { try (Socket clientSocket = serverSocket.accept(); BufferedReader serverInput = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); BufferedWriter serverOutput = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()))) { System.out.println(\"\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0438\u0435\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u0441 \u043f\u043e\u0440\u0442\u0430 \" + port); String data = serverInput.readLine(); System.out.println(\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: \" + data); String response = processInput(data); serverOutput.write(response); serverOutput.flush(); } } } catch (IOException e) { System.err.printf(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (%s:%d): %s\", address, port, e.getMessage()); } catch (Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } private static String processInput(String data) { StringBuilder response = new StringBuilder(); try { String[] arguments = data.split(\" \"); if (arguments.length < 3) { return \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f 3 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\\n\"; } if (arguments.length > 3) { return \"\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f 3 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\\n\"; } float base1 = Float.parseFloat(arguments[0]); float base2 = Float.parseFloat(arguments[1]); float height = Float.parseFloat(arguments[2]); float result = (base1 + base2) * 0.5f * height; response.append(\"\u041e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 1: \").append(arguments[0]).append(\"\\n\") .append(\"\u041e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 2: \").append(arguments[1]).append(\"\\n\") .append(\"\u0412\u044b\u0441\u043e\u0442\u0430: \").append(arguments[2]).append(\"\\n\") .append(\"\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438: \").append(result).append(\"\\n\"); } catch (NumberFormatException e) { return \"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043a \u0447\u0438\u0441\u043b\u0443\\n\"; } return response.toString(); } }","title":"\u041a\u043e\u0434"},{"location":"lab1/task3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . \u0421\u0442\u0435\u043a: \u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net, io \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\task_3\\src\\main\\java\\ru\\barkhatnat \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 cd server javac HttpServer.java java HttpServer.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 ) \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0447\u0435\u0440\u0435\u0437 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 http://<ip>:<port>/ \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435. (\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e http://localhost:1234/ ) public class HtmlReader { private static final String NOT_FOUND_HTML = \"<html><body><h1>404 NOT FOUND</h1></body></html>\"; private static final String SERVER_ERROR = \"<html><body><h1>500 Internal Server Error</h1></body></html>\"; public static String readHtmlFile(String filePath) { StringBuilder htmlContent = new StringBuilder(); String line; File file = new File(filePath); if (!file.exists()) { return NOT_FOUND_HTML; } try (BufferedReader reader = new BufferedReader(new FileReader(file))) { while ((line = reader.readLine()) != null) { htmlContent.append(line).append(\"\\n\"); } } catch (IOException e) { return SERVER_ERROR; } return htmlContent.toString(); } } public class HttpResponseSender { private static final String HTTP_OK = \"HTTP/1.1 200 OK\"; private static final String CONTENT_TYPE = \"Content-Type: text/html; charset=UTF-8\"; public static void sendOkResponseWithContent(PrintWriter out, String htmlContent) { out.println(HTTP_OK); out.println(CONTENT_TYPE); out.println(\"Content-Length: \" + htmlContent.length()); out.println(); out.print(htmlContent); out.flush(); } } public class HttpServer { private static final String HTML_FILE_PATH = \"task_3/src/main/java/ru/barkhatnat/server/index.html\"; public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (ServerSocket serverSocket = new ServerSocket(port, 0, InetAddress.getByName(address))) { System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 \" + port); while (true) { try (Socket clientSocket = serverSocket.accept()) { System.out.println(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442: \" + clientSocket.getInetAddress() + \":\" + clientSocket.getPort()); handleRequest(clientSocket); } catch (IOException e) { System.err.println(\"Error accepting client connection: \" + e.getMessage()); } } } catch (IOException e) { System.err.printf(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (%s:%d): %s\", address, port, e.getMessage()); } catch (Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } private static void handleRequest(Socket clientSocket) { try (BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true)) { String requestLine = in.readLine(); System.out.println(\"\u0417\u0430\u043f\u0440\u043e\u0441: \" + requestLine); String htmlContent = HtmlReader.readHtmlFile(HTML_FILE_PATH); HttpResponseSender.sendOkResponseWithContent(out, htmlContent); } catch (IOException e) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \" + e.getMessage()); } } } <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>HTTP Server</title> </head> <body> <h1>\u0412\u044b \u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 index.html </h1> </body> </html>","title":"Task 3"},{"location":"lab1/task3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html .","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab1/task3/#_2","text":"\u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net, io \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP","title":"\u0421\u0442\u0435\u043a:"},{"location":"lab1/task3/#_3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\task_3\\src\\main\\java\\ru\\barkhatnat \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 cd server javac HttpServer.java java HttpServer.java <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 ) \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0447\u0435\u0440\u0435\u0437 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 http://<ip>:<port>/ \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435. (\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e http://localhost:1234/ ) public class HtmlReader { private static final String NOT_FOUND_HTML = \"<html><body><h1>404 NOT FOUND</h1></body></html>\"; private static final String SERVER_ERROR = \"<html><body><h1>500 Internal Server Error</h1></body></html>\"; public static String readHtmlFile(String filePath) { StringBuilder htmlContent = new StringBuilder(); String line; File file = new File(filePath); if (!file.exists()) { return NOT_FOUND_HTML; } try (BufferedReader reader = new BufferedReader(new FileReader(file))) { while ((line = reader.readLine()) != null) { htmlContent.append(line).append(\"\\n\"); } } catch (IOException e) { return SERVER_ERROR; } return htmlContent.toString(); } } public class HttpResponseSender { private static final String HTTP_OK = \"HTTP/1.1 200 OK\"; private static final String CONTENT_TYPE = \"Content-Type: text/html; charset=UTF-8\"; public static void sendOkResponseWithContent(PrintWriter out, String htmlContent) { out.println(HTTP_OK); out.println(CONTENT_TYPE); out.println(\"Content-Length: \" + htmlContent.length()); out.println(); out.print(htmlContent); out.flush(); } } public class HttpServer { private static final String HTML_FILE_PATH = \"task_3/src/main/java/ru/barkhatnat/server/index.html\"; public static void main(String[] args) { final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (ServerSocket serverSocket = new ServerSocket(port, 0, InetAddress.getByName(address))) { System.out.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 \" + port); while (true) { try (Socket clientSocket = serverSocket.accept()) { System.out.println(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442: \" + clientSocket.getInetAddress() + \":\" + clientSocket.getPort()); handleRequest(clientSocket); } catch (IOException e) { System.err.println(\"Error accepting client connection: \" + e.getMessage()); } } } catch (IOException e) { System.err.printf(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (%s:%d): %s\", address, port, e.getMessage()); } catch (Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } private static void handleRequest(Socket clientSocket) { try (BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true)) { String requestLine = in.readLine(); System.out.println(\"\u0417\u0430\u043f\u0440\u043e\u0441: \" + requestLine); String htmlContent = HtmlReader.readHtmlFile(HTML_FILE_PATH); HttpResponseSender.sendOkResponseWithContent(out, htmlContent); } catch (IOException e) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \" + e.getMessage()); } } } <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>HTTP Server</title> </head> <body> <h1>\u0412\u044b \u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 index.html </h1> </body> </html>","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443"},{"location":"lab1/task4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0421\u0442\u0435\u043a: \u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net, io, util \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\out\\artifacts\\task_4_jar\\ \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 java -cp task_4.jar ru.barkhatnat.server.Application <port> \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 1234 ) \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 java -cp task_4.jar ru.barkhatnat.client.Application <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 ) \u0427\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434 public class Application { public static void main(final String[] args) { final BlockingQueue<String> outgoingMessagesQueue = new LinkedBlockingDeque<>(10); final BlockingQueue<Message> incomingMessageQueue = new LinkedBlockingDeque<>(50); final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (final Socket socket = new Socket(address, port); final Scanner scanner = new Scanner(System.in)) { final String userName = obtainUserName(scanner); final ExecutorService pool = Executors.newFixedThreadPool(4); final Callable<Object> consoleMessageReaderCallable = Executors.callable(new ConsoleMessageReader(outgoingMessagesQueue, exception -> { if (Thread.currentThread().isInterrupted()) { return; } if (exception != null && !(exception instanceof InterruptedException)) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\"); exception.printStackTrace(System.err); } pool.shutdownNow(); })); final Callable<Object> chatMessageSenderCallable = Executors.callable(new ChatMessageSender(outgoingMessagesQueue, userName, socket, exception -> { if (Thread.currentThread().isInterrupted()) { return; } if (exception != null && !(exception instanceof InterruptedException)) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\"); exception.printStackTrace(System.err); } pool.shutdownNow(); })); final Callable<Object> consoleMessageWriterCallable = Executors.callable(new ConsoleMessageWriter(incomingMessageQueue, exception -> { if (Thread.currentThread().isInterrupted()) { return; } if (!(exception instanceof InterruptedException)) { System.err.println(exception.getMessage()); } })); final Callable<Object> chatMessageReceiver = Executors.callable(new ChatMessageReceiver(incomingMessageQueue, socket, exception -> { if (Thread.currentThread().isInterrupted()) { return; } if (exception != null) { if (exception instanceof SocketException) { System.err.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0440\u0432\u0430\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\"); } else if (!(exception instanceof InterruptedException)) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\"); exception.printStackTrace(System.err); } } pool.shutdownNow(); })); pool.invokeAll(asList(consoleMessageReaderCallable, chatMessageSenderCallable, consoleMessageWriterCallable, chatMessageReceiver)); } catch (final UnknownHostException exception) { System.err.printf(\"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 host: %s\\n\", address); } catch (final IOException exception) { System.err.printf(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (%s:%d): %s\", address, port, exception.getMessage()); } catch (final Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } private static String obtainUserName(final Scanner scanner) { System.out.print(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \"); return scanner.nextLine(); } }","title":"Task 4"},{"location":"lab1/task4/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab1/task4/#_2","text":"\u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net, io, util \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP","title":"\u0421\u0442\u0435\u043a:"},{"location":"lab1/task4/#_3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\out\\artifacts\\task_4_jar\\ \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 java -cp task_4.jar ru.barkhatnat.server.Application <port> \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 1234 ) \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 java -cp task_4.jar ru.barkhatnat.client.Application <ip> <port> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 )","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443"},{"location":"lab1/task4/#_4","text":"public class Application { public static void main(final String[] args) { final BlockingQueue<String> outgoingMessagesQueue = new LinkedBlockingDeque<>(10); final BlockingQueue<Message> incomingMessageQueue = new LinkedBlockingDeque<>(50); final String address = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; try (final Socket socket = new Socket(address, port); final Scanner scanner = new Scanner(System.in)) { final String userName = obtainUserName(scanner); final ExecutorService pool = Executors.newFixedThreadPool(4); final Callable<Object> consoleMessageReaderCallable = Executors.callable(new ConsoleMessageReader(outgoingMessagesQueue, exception -> { if (Thread.currentThread().isInterrupted()) { return; } if (exception != null && !(exception instanceof InterruptedException)) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\"); exception.printStackTrace(System.err); } pool.shutdownNow(); })); final Callable<Object> chatMessageSenderCallable = Executors.callable(new ChatMessageSender(outgoingMessagesQueue, userName, socket, exception -> { if (Thread.currentThread().isInterrupted()) { return; } if (exception != null && !(exception instanceof InterruptedException)) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\"); exception.printStackTrace(System.err); } pool.shutdownNow(); })); final Callable<Object> consoleMessageWriterCallable = Executors.callable(new ConsoleMessageWriter(incomingMessageQueue, exception -> { if (Thread.currentThread().isInterrupted()) { return; } if (!(exception instanceof InterruptedException)) { System.err.println(exception.getMessage()); } })); final Callable<Object> chatMessageReceiver = Executors.callable(new ChatMessageReceiver(incomingMessageQueue, socket, exception -> { if (Thread.currentThread().isInterrupted()) { return; } if (exception != null) { if (exception instanceof SocketException) { System.err.println(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0440\u0432\u0430\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\"); } else if (!(exception instanceof InterruptedException)) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\"); exception.printStackTrace(System.err); } } pool.shutdownNow(); })); pool.invokeAll(asList(consoleMessageReaderCallable, chatMessageSenderCallable, consoleMessageWriterCallable, chatMessageReceiver)); } catch (final UnknownHostException exception) { System.err.printf(\"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 host: %s\\n\", address); } catch (final IOException exception) { System.err.printf(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (%s:%d): %s\", address, port, exception.getMessage()); } catch (final Exception exception) { System.err.println(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\"); exception.printStackTrace(System.err); } } private static String obtainUserName(final Scanner scanner) { System.out.print(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \"); return scanner.nextLine(); } }","title":"\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"lab1/task5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0421\u0442\u0435\u043a: \u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net, util, io \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\task_1\\src\\main\\java\\ru\\barkhatnat \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 cd server javac HttpServer.java java HttpServer.java <ip> <port> <name> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 SimpleJavaHTTPServer ) POST \u043c\u0435\u0442\u043e\u0434 \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 URI, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 localhost:1234/grades?discipline=math&grade=6 GET \u043c\u0435\u0442\u043e\u0434 \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c URI localhost:1234/grades \u041a\u043e\u0434 public class HttpHandler implements com.sun.net.httpserver.HttpHandler { private final Map<String, String> grades; public HttpHandler(Map<String, String> grades) { this.grades = grades; } @Override public void handle(HttpExchange exchange) throws IOException { String method = exchange.getRequestMethod(); if (\"GET\".equalsIgnoreCase(method)) { handleGetRequest(exchange); } else if (\"POST\".equalsIgnoreCase(method)) { handlePostRequest(exchange); } else { sendResponse(exchange, 405, \"Method Not Allowed\"); } } private void handleGetRequest(HttpExchange exchange) throws IOException { StringBuilder response = new StringBuilder(\"<html><body><h2>Grades</h2><ul>\"); for (Map.Entry<String, String> entry : grades.entrySet()) { response.append(\"<li>\").append(entry.getKey()).append(\": \").append(entry.getValue()).append(\"</li>\"); } response.append(\"</ul></body></html>\"); sendResponse(exchange, 200, response.toString()); } private void handlePostRequest(HttpExchange exchange) throws IOException { String uri = String.valueOf(exchange.getRequestURI()); Map<String, String> params = parseQuery(uri); String discipline = params.get(\"discipline\"); String grade = params.get(\"grade\"); if (discipline != null && grade != null) { grades.put(discipline, grade); sendResponse(exchange, 200, \"Grade saved successfully\"); } else { sendResponse(exchange, 400, \"Missing discipline or grade\"); } } private Map<String, String> parseQuery(String uri) { Map<String, String> params = new HashMap<>(); String[] uriParts = uri.split(\"\\\\?\", 2); if (uriParts.length < 2 || uriParts[1].isEmpty()) { return params; } String[] pairs = uriParts[1].split(\"&\"); for (String pair : pairs) { String[] keyValue = pair.split(\"=\", 2); if (keyValue.length > 1) { params.put(keyValue[0], keyValue[1]); } else { params.put(keyValue[0], \"\"); } } return params; } private void sendResponse(HttpExchange exchange, int statusCode, String response) throws IOException { exchange.sendResponseHeaders(statusCode, response.length()); OutputStream os = exchange.getResponseBody(); os.write(response.getBytes()); os.close(); } } public class HttpServer { private final String host; private final int port; private final String name; private static final Map<String, String> grades = new HashMap<>(); public HttpServer(String host, int port, String name) { this.host = host; this.port = port; this.name = name; } public void start() { try { com.sun.net.httpserver.HttpServer server = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(host, port), 0); System.out.println(name + \" started on \" + host + \":\" + port); server.createContext(\"/grades\", new HttpHandler(grades)); server.setExecutor(null); server.start(); } catch (IOException e) { System.err.println(\"Server failed to start: \" + e.getMessage()); } } public static void main(String[] args) { final String host = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; final String name = args.length > 2 ? args[2] : \"SimpleJavaHTTPServer\"; HttpServer server = new HttpServer(host, port, name); try { server.start(); } catch (Exception e) { e.printStackTrace(); } } }","title":"Task 5"},{"location":"lab1/task5/#_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab1/task5/#_2","text":"\u042f\u041f: Java \u041f\u0430\u043a\u0435\u0442: net, util, io \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP","title":"\u0421\u0442\u0435\u043a:"},{"location":"lab1/task5/#_3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 Lr1\\task_1\\src\\main\\java\\ru\\barkhatnat \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 cd server javac HttpServer.java java HttpServer.java <ip> <port> <name> (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 ip \u0438 \u043f\u043e\u0440\u0442, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e localhost:1234 SimpleJavaHTTPServer ) POST \u043c\u0435\u0442\u043e\u0434 \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 URI, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 localhost:1234/grades?discipline=math&grade=6 GET \u043c\u0435\u0442\u043e\u0434 \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c URI localhost:1234/grades","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443"},{"location":"lab1/task5/#_4","text":"public class HttpHandler implements com.sun.net.httpserver.HttpHandler { private final Map<String, String> grades; public HttpHandler(Map<String, String> grades) { this.grades = grades; } @Override public void handle(HttpExchange exchange) throws IOException { String method = exchange.getRequestMethod(); if (\"GET\".equalsIgnoreCase(method)) { handleGetRequest(exchange); } else if (\"POST\".equalsIgnoreCase(method)) { handlePostRequest(exchange); } else { sendResponse(exchange, 405, \"Method Not Allowed\"); } } private void handleGetRequest(HttpExchange exchange) throws IOException { StringBuilder response = new StringBuilder(\"<html><body><h2>Grades</h2><ul>\"); for (Map.Entry<String, String> entry : grades.entrySet()) { response.append(\"<li>\").append(entry.getKey()).append(\": \").append(entry.getValue()).append(\"</li>\"); } response.append(\"</ul></body></html>\"); sendResponse(exchange, 200, response.toString()); } private void handlePostRequest(HttpExchange exchange) throws IOException { String uri = String.valueOf(exchange.getRequestURI()); Map<String, String> params = parseQuery(uri); String discipline = params.get(\"discipline\"); String grade = params.get(\"grade\"); if (discipline != null && grade != null) { grades.put(discipline, grade); sendResponse(exchange, 200, \"Grade saved successfully\"); } else { sendResponse(exchange, 400, \"Missing discipline or grade\"); } } private Map<String, String> parseQuery(String uri) { Map<String, String> params = new HashMap<>(); String[] uriParts = uri.split(\"\\\\?\", 2); if (uriParts.length < 2 || uriParts[1].isEmpty()) { return params; } String[] pairs = uriParts[1].split(\"&\"); for (String pair : pairs) { String[] keyValue = pair.split(\"=\", 2); if (keyValue.length > 1) { params.put(keyValue[0], keyValue[1]); } else { params.put(keyValue[0], \"\"); } } return params; } private void sendResponse(HttpExchange exchange, int statusCode, String response) throws IOException { exchange.sendResponseHeaders(statusCode, response.length()); OutputStream os = exchange.getResponseBody(); os.write(response.getBytes()); os.close(); } } public class HttpServer { private final String host; private final int port; private final String name; private static final Map<String, String> grades = new HashMap<>(); public HttpServer(String host, int port, String name) { this.host = host; this.port = port; this.name = name; } public void start() { try { com.sun.net.httpserver.HttpServer server = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(host, port), 0); System.out.println(name + \" started on \" + host + \":\" + port); server.createContext(\"/grades\", new HttpHandler(grades)); server.setExecutor(null); server.start(); } catch (IOException e) { System.err.println(\"Server failed to start: \" + e.getMessage()); } } public static void main(String[] args) { final String host = args.length > 0 ? args[0] : \"localhost\"; final int port = args.length > 1 ? Integer.parseInt(args[1]) : 1234; final String name = args.length > 2 ? args[2] : \"SimpleJavaHTTPServer\"; HttpServer server = new HttpServer(host, port, name); try { server.start(); } catch (Exception e) { e.printStackTrace(); } } }","title":"\u041a\u043e\u0434"},{"location":"lab2/part1/","text":"\u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u21162 - \"\u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439\" \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u0421\u0442\u0435\u043a: \u042f\u0437\u044b\u043a: Java 21. \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a: Spring Boot \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: PostgreSQL \u0428\u0430\u0431\u043b\u043e\u043d\u0438\u0437\u0430\u0442\u043e\u0440: Thymeleaf \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c: Spring Security \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e: Lombok \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0431\u043e\u0440\u043a\u0438: Maven. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b\u0430 \u0442\u0430\u043a\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u043a\u0430\u043a Classroom, Homework, MyUser, Student, Teacher, Subject, Submission \u0438 Teacher \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b\u0430 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: @Entity @Getter @Setter public class Classroom { @Id @UuidGenerator private UUID id; @Column(nullable = false, unique = true, length = 10) private String name; @ManyToOne @JoinColumn(name = \"subject_id\", nullable = false) private Subject subject; @ManyToOne @JoinColumn(name = \"teacher_id\", nullable = false) private Teacher teacher; @OneToMany(mappedBy = \"classroom\") private List<Homework> homeworks; @ManyToMany private List<Student> students; } \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0431\u044b\u043b\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL. \u0417\u0430\u0442\u0435\u043c \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 @Repository public interface ClassroomRepository extends JpaRepository<Classroom, UUID> { List<Classroom> findByTeacherEmail(String email); } \u0418 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b @Controller @RequestMapping(\"teacher/classrooms\") @RequiredArgsConstructor public class ClassroomController { private final ClassroomRepository classroomRepository; private final MyUserRepository myUserRepository; private final StudentRepository studentRepository; private final SubjectRepository subjectRepository; private final SubmissionRepository submissionRepository; private final HomeworkRepository homeworkRepository; @GetMapping public String getAllClassrooms(Model model) { List<Classroom> classrooms = classroomRepository.findAll(); model.addAttribute(\"classrooms\", classrooms); return \"teacher/classroom/list\"; } @GetMapping(\"/create\") public String showCreateForm(Model model) { MyUser teacher = getCurrentUser(); List<Subject> teacherSubjects = subjectRepository.findByTeacherEmail(teacher.getEmail()); model.addAttribute(\"teacherSubjects\", teacherSubjects); model.addAttribute(\"classroom\", new Classroom()); model.addAttribute(\"subject\", new Subject()); model.addAttribute(\"students\", studentRepository.findAll()); return \"teacher/classroom/form\"; } @PostMapping public String createClassroom(@ModelAttribute Classroom classroom) { MyUser teacher = getCurrentUser(); classroom.setTeacher((Teacher) teacher); for (Student student : classroom.getStudents()) { student.getClassrooms().add(classroom); } classroomRepository.save(classroom); return \"redirect:/teacher/classrooms\"; } @GetMapping(\"/{id}/edit\") public String showEditForm(@PathVariable UUID id, Model model) { Classroom classroom = classroomRepository.findById(id) .orElseThrow(() -> new ClassroomNotFoundException(id)); List<Subject> teacherSubjects = subjectRepository.findByTeacherEmail(classroom.getTeacher().getEmail()); model.addAttribute(\"classroom\", classroom); model.addAttribute(\"teacherSubjects\", teacherSubjects); model.addAttribute(\"subject\", new Subject()); model.addAttribute(\"students\", studentRepository.findAll()); return \"teacher/classroom/form\"; } @PostMapping(\"/edit\") public String updateClassroom(@ModelAttribute Classroom classroom) { Classroom existingClassroom = classroomRepository.findById(classroom.getId()).get(); existingClassroom.setName(classroom.getName()); existingClassroom.setStudents(classroom.getStudents()); classroomRepository.save(existingClassroom); return \"redirect:/teacher/classrooms\"; } @GetMapping(\"/{id}/delete\") public String deleteClassroom(@PathVariable UUID id) { classroomRepository.deleteById(id); return \"redirect:/teacher/classrooms\"; } @GetMapping(\"/students/{id}/classroom\") public String getClassroomDetails(@PathVariable UUID id, Model model) { List<Student> students = studentRepository.findByClassroomId(id); model.addAttribute(\"students\", students); return \"teacher/classroom/students\"; } private MyUser getCurrentUser() { String email = SecurityContextHolder.getContext().getAuthentication().getName(); return myUserRepository.findByEmail(email) .orElseThrow(() -> new UserNotFoundException(email)); } @GetMapping(\"/{id}/grades\") public String viewClassroomGrades( @PathVariable UUID id, Model model) { Classroom classroom = classroomRepository.findById(id) .orElseThrow(() -> new IllegalArgumentException(\"Classroom not found\")); List<Student> students = studentRepository.findByClassroomId(id); List<Homework> homeworks = homeworkRepository.findByClassroomId(id); List<Submission> submissions = submissionRepository.findByClassroomId(id); Map<Student, Map<Integer, Submission>> studentGrades = new HashMap<>(); for (Student student : students) { studentGrades.put(student, new HashMap<>()); } for (Submission submission : submissions) { Student student = submission.getStudent(); if (studentGrades.containsKey(student)) { studentGrades.get(student).put(submission.getHomework().getNumber(), submission); } } model.addAttribute(\"classroom\", classroom); model.addAttribute(\"students\", students); model.addAttribute(\"studentGrades\", studentGrades); model.addAttribute(\"homeworks\", homeworks); return \"teacher/classroom/journal\"; } } HTML-templates \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0430 2 \u0433\u0440\u0443\u043f\u043f\u044b - teacher \u0438 student \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0444\u043e\u0440\u043c\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0431\u0443\u0434\u0443\u0442 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u043b\u043e\u0433\u0438\u043d \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u0445\u043e\u0434\u0430. \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u0430 \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"/home\". \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u0440\u043e\u043b\u044f\u043c\u0438: \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0441 \u0440\u043e\u043b\u044c\u044e \"TEACHER\" \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 \"/teacher\", \u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0441 \u0440\u043e\u043b\u044c\u044e \"STUDENT\" \u2014 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 \"/student\". \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u041f\u0430\u0440\u043e\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0432 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e BCrypt. \u0422\u0430\u043a\u0436\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u043e URL \"/logout\", \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043d\u043e\u0432\u0430 \u043f\u043e\u043f\u0430\u0434\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0445\u043e\u0434\u0430. @Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { http .cors(AbstractHttpConfigurer::disable) .csrf(AbstractHttpConfigurer::disable) .securityMatcher(\"/**\") .authorizeHttpRequests(auth -> auth .requestMatchers(\"/login\").permitAll() .requestMatchers(\"/registration\").permitAll() .requestMatchers(\"/teacher/**\").hasRole(\"TEACHER\") .requestMatchers(\"/student/**\").hasRole(\"STUDENT\") .anyRequest().authenticated() ) .formLogin(form -> form .loginPage(\"/login\") .defaultSuccessUrl(\"/home\", true) .permitAll() ) .logout(logout -> logout .logoutUrl(\"/logout\") .logoutSuccessUrl(\"/login\") .permitAll() ); return http.build(); } @Bean public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception { return authenticationConfiguration.getAuthenticationManager(); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } } \u0411\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0438 html templates \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c bootstrap. \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 \u0417\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u043e\u0434 \u0437\u0430\u043f\u0438\u0441\u044c\u044e \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043a\u043b\u0430\u0441\u0441 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u043c \u0434\u0437 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u043c\u0441\u044f \u043a\u0430\u043a \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u041c\u0430\u0448\u0430 \u041d\u0430\u043c \u0432\u044b\u0434\u0430\u043d\u043e \u0434\u0437 \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u041f\u0440\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0441\u0434\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u044f, \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0434\u0430\u043b \u043e\u0442\u0432\u0435\u0442 \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u041c\u0430\u0448\u0438 \u0438 \u0432\u0438\u0434\u0438\u043c \u0441\u0432\u043e\u044e \u043e\u0446\u0435\u043d\u043a\u0443","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab2/part1/#_1","text":"\u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab2/part1/#_2","text":"\u042f\u0437\u044b\u043a: Java 21. \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a: Spring Boot \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: PostgreSQL \u0428\u0430\u0431\u043b\u043e\u043d\u0438\u0437\u0430\u0442\u043e\u0440: Thymeleaf \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c: Spring Security \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e: Lombok \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0431\u043e\u0440\u043a\u0438: Maven.","title":"\u0421\u0442\u0435\u043a:"},{"location":"lab2/part1/#_3","text":"\u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b\u0430 \u0442\u0430\u043a\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u043a\u0430\u043a Classroom, Homework, MyUser, Student, Teacher, Subject, Submission \u0438 Teacher \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b\u0430 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: @Entity @Getter @Setter public class Classroom { @Id @UuidGenerator private UUID id; @Column(nullable = false, unique = true, length = 10) private String name; @ManyToOne @JoinColumn(name = \"subject_id\", nullable = false) private Subject subject; @ManyToOne @JoinColumn(name = \"teacher_id\", nullable = false) private Teacher teacher; @OneToMany(mappedBy = \"classroom\") private List<Homework> homeworks; @ManyToMany private List<Student> students; } \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0431\u044b\u043b\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL. \u0417\u0430\u0442\u0435\u043c \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 @Repository public interface ClassroomRepository extends JpaRepository<Classroom, UUID> { List<Classroom> findByTeacherEmail(String email); } \u0418 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b @Controller @RequestMapping(\"teacher/classrooms\") @RequiredArgsConstructor public class ClassroomController { private final ClassroomRepository classroomRepository; private final MyUserRepository myUserRepository; private final StudentRepository studentRepository; private final SubjectRepository subjectRepository; private final SubmissionRepository submissionRepository; private final HomeworkRepository homeworkRepository; @GetMapping public String getAllClassrooms(Model model) { List<Classroom> classrooms = classroomRepository.findAll(); model.addAttribute(\"classrooms\", classrooms); return \"teacher/classroom/list\"; } @GetMapping(\"/create\") public String showCreateForm(Model model) { MyUser teacher = getCurrentUser(); List<Subject> teacherSubjects = subjectRepository.findByTeacherEmail(teacher.getEmail()); model.addAttribute(\"teacherSubjects\", teacherSubjects); model.addAttribute(\"classroom\", new Classroom()); model.addAttribute(\"subject\", new Subject()); model.addAttribute(\"students\", studentRepository.findAll()); return \"teacher/classroom/form\"; } @PostMapping public String createClassroom(@ModelAttribute Classroom classroom) { MyUser teacher = getCurrentUser(); classroom.setTeacher((Teacher) teacher); for (Student student : classroom.getStudents()) { student.getClassrooms().add(classroom); } classroomRepository.save(classroom); return \"redirect:/teacher/classrooms\"; } @GetMapping(\"/{id}/edit\") public String showEditForm(@PathVariable UUID id, Model model) { Classroom classroom = classroomRepository.findById(id) .orElseThrow(() -> new ClassroomNotFoundException(id)); List<Subject> teacherSubjects = subjectRepository.findByTeacherEmail(classroom.getTeacher().getEmail()); model.addAttribute(\"classroom\", classroom); model.addAttribute(\"teacherSubjects\", teacherSubjects); model.addAttribute(\"subject\", new Subject()); model.addAttribute(\"students\", studentRepository.findAll()); return \"teacher/classroom/form\"; } @PostMapping(\"/edit\") public String updateClassroom(@ModelAttribute Classroom classroom) { Classroom existingClassroom = classroomRepository.findById(classroom.getId()).get(); existingClassroom.setName(classroom.getName()); existingClassroom.setStudents(classroom.getStudents()); classroomRepository.save(existingClassroom); return \"redirect:/teacher/classrooms\"; } @GetMapping(\"/{id}/delete\") public String deleteClassroom(@PathVariable UUID id) { classroomRepository.deleteById(id); return \"redirect:/teacher/classrooms\"; } @GetMapping(\"/students/{id}/classroom\") public String getClassroomDetails(@PathVariable UUID id, Model model) { List<Student> students = studentRepository.findByClassroomId(id); model.addAttribute(\"students\", students); return \"teacher/classroom/students\"; } private MyUser getCurrentUser() { String email = SecurityContextHolder.getContext().getAuthentication().getName(); return myUserRepository.findByEmail(email) .orElseThrow(() -> new UserNotFoundException(email)); } @GetMapping(\"/{id}/grades\") public String viewClassroomGrades( @PathVariable UUID id, Model model) { Classroom classroom = classroomRepository.findById(id) .orElseThrow(() -> new IllegalArgumentException(\"Classroom not found\")); List<Student> students = studentRepository.findByClassroomId(id); List<Homework> homeworks = homeworkRepository.findByClassroomId(id); List<Submission> submissions = submissionRepository.findByClassroomId(id); Map<Student, Map<Integer, Submission>> studentGrades = new HashMap<>(); for (Student student : students) { studentGrades.put(student, new HashMap<>()); } for (Submission submission : submissions) { Student student = submission.getStudent(); if (studentGrades.containsKey(student)) { studentGrades.get(student).put(submission.getHomework().getNumber(), submission); } } model.addAttribute(\"classroom\", classroom); model.addAttribute(\"students\", students); model.addAttribute(\"studentGrades\", studentGrades); model.addAttribute(\"homeworks\", homeworks); return \"teacher/classroom/journal\"; } } HTML-templates \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0430 2 \u0433\u0440\u0443\u043f\u043f\u044b - teacher \u0438 student \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0444\u043e\u0440\u043c\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0431\u0443\u0434\u0443\u0442 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u043b\u043e\u0433\u0438\u043d \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u0445\u043e\u0434\u0430. \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u0430 \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"/home\". \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u0440\u043e\u043b\u044f\u043c\u0438: \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0441 \u0440\u043e\u043b\u044c\u044e \"TEACHER\" \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 \"/teacher\", \u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0441 \u0440\u043e\u043b\u044c\u044e \"STUDENT\" \u2014 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 \"/student\". \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u041f\u0430\u0440\u043e\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0432 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e BCrypt. \u0422\u0430\u043a\u0436\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u043e URL \"/logout\", \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043d\u043e\u0432\u0430 \u043f\u043e\u043f\u0430\u0434\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0445\u043e\u0434\u0430. @Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { http .cors(AbstractHttpConfigurer::disable) .csrf(AbstractHttpConfigurer::disable) .securityMatcher(\"/**\") .authorizeHttpRequests(auth -> auth .requestMatchers(\"/login\").permitAll() .requestMatchers(\"/registration\").permitAll() .requestMatchers(\"/teacher/**\").hasRole(\"TEACHER\") .requestMatchers(\"/student/**\").hasRole(\"STUDENT\") .anyRequest().authenticated() ) .formLogin(form -> form .loginPage(\"/login\") .defaultSuccessUrl(\"/home\", true) .permitAll() ) .logout(logout -> logout .logoutUrl(\"/logout\") .logoutSuccessUrl(\"/login\") .permitAll() ); return http.build(); } @Bean public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception { return authenticationConfiguration.getAuthenticationManager(); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } } \u0411\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0438 html templates \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c bootstrap.","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab2/part1/#_4","text":"\u0417\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u043e\u0434 \u0437\u0430\u043f\u0438\u0441\u044c\u044e \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043a\u043b\u0430\u0441\u0441 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u043c \u0434\u0437 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u043c\u0441\u044f \u043a\u0430\u043a \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u041c\u0430\u0448\u0430 \u041d\u0430\u043c \u0432\u044b\u0434\u0430\u043d\u043e \u0434\u0437 \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u041f\u0440\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0441\u0434\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u044f, \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0434\u0430\u043b \u043e\u0442\u0432\u0435\u0442 \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u041c\u0430\u0448\u0438 \u0438 \u0432\u0438\u0434\u0438\u043c \u0441\u0432\u043e\u044e \u043e\u0446\u0435\u043d\u043a\u0443","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430"},{"location":"lab3/lab/","text":"\u042d\u0442\u0430\u043f 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0435\u0439 \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u0432 \u043a\u0438\u043d\u043e\u0442\u0435\u0430\u0442\u0440\u0435. \u041a\u0438\u043d\u043e\u0442\u0435\u0430\u0442\u0440 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043b\u043e\u0432 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043c\u0435\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u044f\u0434\u043e\u0432 \u0438 \u043c\u0435\u0441\u0442 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u044f\u0434\u0443. \u0412 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0444\u0438\u043b\u044c\u043c\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c\u044b\u0445 \u0441\u0435\u0430\u043d\u0441\u0430\u0445 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430\u0447\u0430\u043b\u0430, \u0437\u0430\u043b\u0430, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0444\u0438\u043b\u044c\u043c\u0430 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u0438\u043b\u0435\u0442\u0430. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043b\u0430\u043c\u0438, \u0444\u0438\u043b\u044c\u043c\u0430\u043c\u0438 \u0438 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0441\u0435\u0430\u043d\u0441\u043e\u0432, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0430\u043d\u0441\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043b\u0435. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0442\u0430\u0442\u044c \u0431\u0438\u043b\u0435\u0442\u044b \u043d\u0430 \u0441\u0435\u0430\u043d\u0441\u044b \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0432\u043e\u0438\u043c\u0438 \u0431\u0438\u043b\u0435\u0442\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 \u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 (\u0432\u043e\u0437\u043c\u043e\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0431\u0438\u043b\u0435\u0442\u0430), \u0433\u0434\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u043e\u043a\u0443\u043f\u043e\u043a. \u042d\u0442\u0430\u043f 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u042f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 9 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 3 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0430 JPA \u0438 Lombok, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0431\u044b\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u0441\u0432\u044f\u0437\u0438 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043f\u0440\u0438\u0432\u043e\u0436\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c Hall, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u0441\u0432\u044f\u0437\u0438 \u0441 Row \u0438 Session, \u043f\u0440\u044f\u043c\u043e \u043a\u0430\u043a \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. @Entity @Getter @Setter @FieldNameConstants @Builder @AllArgsConstructor @NoArgsConstructor public class Hall { @Id @UuidGenerator private UUID id; @Column(nullable = false, length = 32) @NotBlank(message = \"Hall name cannot be blank\") @Size(max = 32, min = 1, message = \"Hall name should not exceed 32 characters\") private String name; @Column(nullable = false, columnDefinition = \"integer default 0\") @Min(value = 0, message = \"Capacity cannot be negative\") private Integer capacity; @OneToMany(mappedBy = \"hall\", cascade = CascadeType.ALL, orphanRemoval = true) private List<Row> rows = new ArrayList<>(); @OneToMany(mappedBy = \"hall\", cascade = CascadeType.ALL, orphanRemoval = true) private List<Session> sessions = new ArrayList<>(); public Hall(String name, Integer capacity, List<Row> rows, List<Session> sessions) { this.name = name; this.capacity = capacity; this.rows = rows; this.sessions = sessions; } } \u042d\u0442\u0430\u043f 3. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432, \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432 \u042f \u0440\u0435\u0448\u0438\u043b\u0430 \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 REST API \u0438 \u043d\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043b\u043e\u044f\u043c\u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432, \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b JPA \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0438\u043c\u0435\u044e\u0442 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b. public interface TicketRepository extends JpaRepository<Ticket, UUID>, JpaSpecificationExecutor<Ticket> { List<Ticket> findByUserId(UUID id); } \u0422\u0430\u043a \u0436\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u044b, \u0433\u0434\u0435 \u0431\u044b\u043b\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u044b CRUD \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b. @Service @RequiredArgsConstructor public class HallService { private final HallRepository hallRepository; private final HallMapper hallMapper; public void deleteById(UUID id) { hallRepository.deleteById(id); } public List<HallDto> findAll() { List<Hall> halls = hallRepository.findAll(); return halls.stream() .map(hallMapper::toHallDto) .toList(); } public HallDto findById(UUID id) { Hall hall = hallRepository.findById(id).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"Entity with id `%s` not found\".formatted(id))); return hallMapper.toHallDto(hall); } public HallUpdateDto update(UUID id, HallUpdateDto hallUpdateDto) { Hall hall = hallRepository.findById(id).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"Entity with id `%s` not found\".formatted(id))); hallMapper.updateWithNull(hallUpdateDto, hall); Hall resultHall = hallRepository.save(hall); return hallMapper.toHallUpdateDto(resultHall); } public HallDto save(@Valid HallCreateDto hallCreateDto) { Hall hall = hallMapper.toEntity(hallCreateDto); Hall resultHall = hallRepository.save(hall); return hallMapper.toHallDto(resultHall); } } \u0414\u0430\u043b\u0435\u0435 \u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u043b\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. @RestController @RequestMapping(\"/rest/admin/halls\") @RequiredArgsConstructor public class HallRestController { private final HallService hallService; @DeleteMapping public ResponseEntity<Void> deleteById(@RequestBody UUID id) { hallService.deleteById(id); return ResponseEntity.noContent().build(); } @GetMapping public ResponseEntity<List<HallDto>> findAll() { return ResponseEntity.ok(hallService.findAll()); } @GetMapping(\"/{id}\") public ResponseEntity<HallDto> findById(@PathVariable UUID id) { return ResponseEntity.ok(hallService.findById(id)); } @PutMapping(\"/{id}\") public ResponseEntity<HallUpdateDto> update(@PathVariable UUID id, @RequestBody HallUpdateDto hallUpdateDto) { return ResponseEntity.ok(hallService.update(id, hallUpdateDto)); } @PostMapping public ResponseEntity<HallDto> save(@RequestBody @Valid HallCreateDto hallCreateDto) { return ResponseEntity.ok(hallService.save(hallCreateDto)); } } \u0422\u0430\u043a \u0436\u0435 \u044f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e Dto. public record HallDto( UUID id, @Size(message = \"Hall name should not exceed 32 characters\", max = 32) @NotBlank(message = \"Hall name cannot be blank\") String name, @Min(message = \"Capacity cannot be negative\", value = 0) Integer capacity, List<RowDto> rows, List<SessionDto> sessions) { } \u042d\u0442\u0430\u043f 4. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0442\u043e\u043a\u0435\u043d\u044b \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u044f \u0440\u0435\u0448\u0438\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c JWT \u0442\u043e\u043a\u0435\u043d\u044b. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0438\u043c\u0435\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043d\u0430\u0434 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u043c \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u0438. \u0422\u0430\u043a \u0436\u0435 \u044f \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u043b\u0430 SecurityConfig \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0449\u0435 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 (\u0434\u0430, \u0441\u044e\u0434\u0430 \u0435\u0449\u0435 \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043d\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b swagger) @Configuration @EnableWebSecurity @RequiredArgsConstructor public class SecurityConfig { private final JwtAuthenticationFilter jwtAuthenticationFilter; private final CustomUserDetailsService customUserDetailsService; private final CustomAuthenticationEntryPoint authEntryPoint; @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class); http .cors(AbstractHttpConfigurer::disable) .csrf(AbstractHttpConfigurer::disable) .securityMatcher(\"/**\") .authorizeHttpRequests(authorize -> authorize .requestMatchers(\"/auth/registration\", \"/auth/login\", \"/v3/api-docs\", \"/v2/api-docs.**\", \"/v3/api-docs/**\", \"/v3/api-docs\", \"/swagger-ui/**\", \"/swagger-ui.html\", \"/swagger-resources/**\", \"/swagger-resources\", \"/swagger-ui/index.html\" , \"/swagger-resources/**\", \"/configuration/ui\", \"/configuration/security\", \"/swagger-ui.html\", \"/webjars/**\", \"/v3/api-docs/**\").permitAll() .requestMatchers(\"/rest/admin/**\").hasRole(\"ADMIN\") .requestMatchers(\"/rest/**\").hasAnyRole(\"USER\", \"ADMIN\") .anyRequest().authenticated() ) .sessionManagement(sessionManagement -> sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) .formLogin().disable() .exceptionHandling().authenticationEntryPoint(authEntryPoint); return http.build(); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Bean public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception { System.out.println(\"Creating AuthenticationManager bean\"); return http.getSharedObject(AuthenticationManagerBuilder.class) .userDetailsService(customUserDetailsService) .passwordEncoder(passwordEncoder()).and().build(); } } \u042f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 AuthController, \u0433\u0434\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043b\u0430 \u043c\u0435\u0442\u043e\u0434\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043b\u043e\u0433\u0438\u043d\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 @RestController @RequiredArgsConstructor @RequestMapping(\"/auth\") @Tag(name = \"Authentication\", description = \"API \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\") public class AuthController { private final JwtIssuer jwtIssuer; private final AuthenticationManager authenticationManager; private final UserService userService; @PostMapping(\"/registration\") @Operation( summary = \"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", description = \"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\", responses = { @ApiResponse(responseCode = \"201\", description = \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\") }) public ResponseEntity<UserDto> createAccount(@Valid @RequestBody UserCreateDto userCreateDto) { UserDto userResponseDto = userService.create(userCreateDto); return ResponseEntity.status(HttpStatus.CREATED).body(userResponseDto); } @PostMapping(\"/login\") @Operation( summary = \"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", description = \"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f\u0430\", responses = { @ApiResponse(responseCode = \"200\", description = \"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u0430, \u0442\u043e\u043a\u0435\u043d \u0432\u044b\u0434\u0430\u043d\"), @ApiResponse(responseCode = \"401\", description = \"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\") }) public LoginResponse login(@Valid @RequestBody LoginRequest request) { var auth = authenticationManager.authenticate( new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()) ); SecurityContextHolder.getContext().setAuthentication(auth); CustomUserDetails customUserDetails = (CustomUserDetails) auth.getPrincipal(); List<String> roles = customUserDetails.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList(); String token = jwtIssuer.issue(customUserDetails.getUser().getId(), customUserDetails.getUser().getEmail(), roles); return LoginResponse.builder().accessToken(token).build(); } } \u042d\u0442\u0430\u043f 5. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 Swagger \u042f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0430 swagger \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430. \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0412 \u0431\u0434 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0440\u043e\u043b\u0435\u0439, \u0441\u0435\u0439\u0447\u0430\u0441 \u0431\u0443\u0434\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0434\u043c\u0438\u043d\u0430 \u0412\u0432\u043e\u0434\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d \u041f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0437\u0430\u043b\u043e\u0433\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u043c accessToken, \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0444\u0438\u043b\u044c\u043c \u0424\u0438\u043b\u044c\u043c \u0431\u044b\u043b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430"},{"location":"lab3/lab/#1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0435\u0439 \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u0432 \u043a\u0438\u043d\u043e\u0442\u0435\u0430\u0442\u0440\u0435. \u041a\u0438\u043d\u043e\u0442\u0435\u0430\u0442\u0440 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043b\u043e\u0432 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043c\u0435\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u044f\u0434\u043e\u0432 \u0438 \u043c\u0435\u0441\u0442 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u044f\u0434\u0443. \u0412 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0444\u0438\u043b\u044c\u043c\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c\u044b\u0445 \u0441\u0435\u0430\u043d\u0441\u0430\u0445 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430\u0447\u0430\u043b\u0430, \u0437\u0430\u043b\u0430, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0444\u0438\u043b\u044c\u043c\u0430 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u0438\u043b\u0435\u0442\u0430. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043b\u0430\u043c\u0438, \u0444\u0438\u043b\u044c\u043c\u0430\u043c\u0438 \u0438 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0441\u0435\u0430\u043d\u0441\u043e\u0432, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0430\u043d\u0441\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043b\u0435. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0442\u0430\u0442\u044c \u0431\u0438\u043b\u0435\u0442\u044b \u043d\u0430 \u0441\u0435\u0430\u043d\u0441\u044b \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0432\u043e\u0438\u043c\u0438 \u0431\u0438\u043b\u0435\u0442\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 \u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 (\u0432\u043e\u0437\u043c\u043e\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0431\u0438\u043b\u0435\u0442\u0430), \u0433\u0434\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u043e\u043a\u0443\u043f\u043e\u043a.","title":"\u042d\u0442\u0430\u043f 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab3/lab/#2","text":"\u042f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 9 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 3 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0430 JPA \u0438 Lombok, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0431\u044b\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u0441\u0432\u044f\u0437\u0438 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043f\u0440\u0438\u0432\u043e\u0436\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c Hall, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u0441\u0432\u044f\u0437\u0438 \u0441 Row \u0438 Session, \u043f\u0440\u044f\u043c\u043e \u043a\u0430\u043a \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. @Entity @Getter @Setter @FieldNameConstants @Builder @AllArgsConstructor @NoArgsConstructor public class Hall { @Id @UuidGenerator private UUID id; @Column(nullable = false, length = 32) @NotBlank(message = \"Hall name cannot be blank\") @Size(max = 32, min = 1, message = \"Hall name should not exceed 32 characters\") private String name; @Column(nullable = false, columnDefinition = \"integer default 0\") @Min(value = 0, message = \"Capacity cannot be negative\") private Integer capacity; @OneToMany(mappedBy = \"hall\", cascade = CascadeType.ALL, orphanRemoval = true) private List<Row> rows = new ArrayList<>(); @OneToMany(mappedBy = \"hall\", cascade = CascadeType.ALL, orphanRemoval = true) private List<Session> sessions = new ArrayList<>(); public Hall(String name, Integer capacity, List<Row> rows, List<Session> sessions) { this.name = name; this.capacity = capacity; this.rows = rows; this.sessions = sessions; } }","title":"\u042d\u0442\u0430\u043f 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435."},{"location":"lab3/lab/#3","text":"\u042f \u0440\u0435\u0448\u0438\u043b\u0430 \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 REST API \u0438 \u043d\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043b\u043e\u044f\u043c\u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432, \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b JPA \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0438\u043c\u0435\u044e\u0442 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b. public interface TicketRepository extends JpaRepository<Ticket, UUID>, JpaSpecificationExecutor<Ticket> { List<Ticket> findByUserId(UUID id); } \u0422\u0430\u043a \u0436\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u044b, \u0433\u0434\u0435 \u0431\u044b\u043b\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u044b CRUD \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b. @Service @RequiredArgsConstructor public class HallService { private final HallRepository hallRepository; private final HallMapper hallMapper; public void deleteById(UUID id) { hallRepository.deleteById(id); } public List<HallDto> findAll() { List<Hall> halls = hallRepository.findAll(); return halls.stream() .map(hallMapper::toHallDto) .toList(); } public HallDto findById(UUID id) { Hall hall = hallRepository.findById(id).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"Entity with id `%s` not found\".formatted(id))); return hallMapper.toHallDto(hall); } public HallUpdateDto update(UUID id, HallUpdateDto hallUpdateDto) { Hall hall = hallRepository.findById(id).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"Entity with id `%s` not found\".formatted(id))); hallMapper.updateWithNull(hallUpdateDto, hall); Hall resultHall = hallRepository.save(hall); return hallMapper.toHallUpdateDto(resultHall); } public HallDto save(@Valid HallCreateDto hallCreateDto) { Hall hall = hallMapper.toEntity(hallCreateDto); Hall resultHall = hallRepository.save(hall); return hallMapper.toHallDto(resultHall); } } \u0414\u0430\u043b\u0435\u0435 \u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u043b\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. @RestController @RequestMapping(\"/rest/admin/halls\") @RequiredArgsConstructor public class HallRestController { private final HallService hallService; @DeleteMapping public ResponseEntity<Void> deleteById(@RequestBody UUID id) { hallService.deleteById(id); return ResponseEntity.noContent().build(); } @GetMapping public ResponseEntity<List<HallDto>> findAll() { return ResponseEntity.ok(hallService.findAll()); } @GetMapping(\"/{id}\") public ResponseEntity<HallDto> findById(@PathVariable UUID id) { return ResponseEntity.ok(hallService.findById(id)); } @PutMapping(\"/{id}\") public ResponseEntity<HallUpdateDto> update(@PathVariable UUID id, @RequestBody HallUpdateDto hallUpdateDto) { return ResponseEntity.ok(hallService.update(id, hallUpdateDto)); } @PostMapping public ResponseEntity<HallDto> save(@RequestBody @Valid HallCreateDto hallCreateDto) { return ResponseEntity.ok(hallService.save(hallCreateDto)); } } \u0422\u0430\u043a \u0436\u0435 \u044f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e Dto. public record HallDto( UUID id, @Size(message = \"Hall name should not exceed 32 characters\", max = 32) @NotBlank(message = \"Hall name cannot be blank\") String name, @Min(message = \"Capacity cannot be negative\", value = 0) Integer capacity, List<RowDto> rows, List<SessionDto> sessions) { }","title":"\u042d\u0442\u0430\u043f 3. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432, \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432"},{"location":"lab3/lab/#4","text":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u044f \u0440\u0435\u0448\u0438\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c JWT \u0442\u043e\u043a\u0435\u043d\u044b. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0438\u043c\u0435\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043d\u0430\u0434 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u043c \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u0438. \u0422\u0430\u043a \u0436\u0435 \u044f \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u043b\u0430 SecurityConfig \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0449\u0435 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 (\u0434\u0430, \u0441\u044e\u0434\u0430 \u0435\u0449\u0435 \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043d\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b swagger) @Configuration @EnableWebSecurity @RequiredArgsConstructor public class SecurityConfig { private final JwtAuthenticationFilter jwtAuthenticationFilter; private final CustomUserDetailsService customUserDetailsService; private final CustomAuthenticationEntryPoint authEntryPoint; @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class); http .cors(AbstractHttpConfigurer::disable) .csrf(AbstractHttpConfigurer::disable) .securityMatcher(\"/**\") .authorizeHttpRequests(authorize -> authorize .requestMatchers(\"/auth/registration\", \"/auth/login\", \"/v3/api-docs\", \"/v2/api-docs.**\", \"/v3/api-docs/**\", \"/v3/api-docs\", \"/swagger-ui/**\", \"/swagger-ui.html\", \"/swagger-resources/**\", \"/swagger-resources\", \"/swagger-ui/index.html\" , \"/swagger-resources/**\", \"/configuration/ui\", \"/configuration/security\", \"/swagger-ui.html\", \"/webjars/**\", \"/v3/api-docs/**\").permitAll() .requestMatchers(\"/rest/admin/**\").hasRole(\"ADMIN\") .requestMatchers(\"/rest/**\").hasAnyRole(\"USER\", \"ADMIN\") .anyRequest().authenticated() ) .sessionManagement(sessionManagement -> sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) .formLogin().disable() .exceptionHandling().authenticationEntryPoint(authEntryPoint); return http.build(); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Bean public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception { System.out.println(\"Creating AuthenticationManager bean\"); return http.getSharedObject(AuthenticationManagerBuilder.class) .userDetailsService(customUserDetailsService) .passwordEncoder(passwordEncoder()).and().build(); } } \u042f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 AuthController, \u0433\u0434\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043b\u0430 \u043c\u0435\u0442\u043e\u0434\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043b\u043e\u0433\u0438\u043d\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 @RestController @RequiredArgsConstructor @RequestMapping(\"/auth\") @Tag(name = \"Authentication\", description = \"API \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\") public class AuthController { private final JwtIssuer jwtIssuer; private final AuthenticationManager authenticationManager; private final UserService userService; @PostMapping(\"/registration\") @Operation( summary = \"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", description = \"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\", responses = { @ApiResponse(responseCode = \"201\", description = \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\") }) public ResponseEntity<UserDto> createAccount(@Valid @RequestBody UserCreateDto userCreateDto) { UserDto userResponseDto = userService.create(userCreateDto); return ResponseEntity.status(HttpStatus.CREATED).body(userResponseDto); } @PostMapping(\"/login\") @Operation( summary = \"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", description = \"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f\u0430\", responses = { @ApiResponse(responseCode = \"200\", description = \"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u0430, \u0442\u043e\u043a\u0435\u043d \u0432\u044b\u0434\u0430\u043d\"), @ApiResponse(responseCode = \"401\", description = \"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\") }) public LoginResponse login(@Valid @RequestBody LoginRequest request) { var auth = authenticationManager.authenticate( new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()) ); SecurityContextHolder.getContext().setAuthentication(auth); CustomUserDetails customUserDetails = (CustomUserDetails) auth.getPrincipal(); List<String> roles = customUserDetails.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList(); String token = jwtIssuer.issue(customUserDetails.getUser().getId(), customUserDetails.getUser().getEmail(), roles); return LoginResponse.builder().accessToken(token).build(); } }","title":"\u042d\u0442\u0430\u043f 4. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0442\u043e\u043a\u0435\u043d\u044b"},{"location":"lab3/lab/#5-swagger","text":"\u042f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0430 swagger \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430.","title":"\u042d\u0442\u0430\u043f 5. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 Swagger"},{"location":"lab3/lab/#_1","text":"\u0412 \u0431\u0434 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0440\u043e\u043b\u0435\u0439, \u0441\u0435\u0439\u0447\u0430\u0441 \u0431\u0443\u0434\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0434\u043c\u0438\u043d\u0430 \u0412\u0432\u043e\u0434\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d \u041f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0437\u0430\u043b\u043e\u0433\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u043c accessToken, \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0444\u0438\u043b\u044c\u043c \u0424\u0438\u043b\u044c\u043c \u0431\u044b\u043b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab3/practice/","text":"3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430 \u0441\u043a\u0440\u0438\u043f\u0442 import os import django os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project_Barkhatova.settings') django.setup() from random import choice, randint from django.utils.timezone import now from project_first_app.models import Owner, Car, License, Owning, User owners_data = [ {\"last_name\": \"\u0418\u0432\u0430\u043d\u043e\u0432\", \"first_name\": \"\u0418\u0432\u0430\u043d\", \"birth_date\": \"1985-01-01\"}, {\"last_name\": \"\u041f\u0435\u0442\u0440\u043e\u0432\", \"first_name\": \"\u041f\u0435\u0442\u0440\", \"birth_date\": \"1990-02-02\"}, {\"last_name\": \"\u0421\u0438\u0434\u043e\u0440\u043e\u0432\", \"first_name\": \"\u0421\u0438\u0434\u043e\u0440\", \"birth_date\": \"1982-03-03\"}, {\"last_name\": \"\u0421\u043c\u0438\u0440\u043d\u043e\u0432\", \"first_name\": \"\u0410\u043b\u0435\u043a\u0441\u0435\u0439\", \"birth_date\": \"1995-04-04\"}, {\"last_name\": \"\u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432\u0430\", \"first_name\": \"\u041c\u0430\u0440\u0438\u044f\", \"birth_date\": \"1988-05-05\"}, {\"last_name\": \"\u041f\u043e\u043f\u043e\u0432\u0430\", \"first_name\": \"\u0410\u043d\u043d\u0430\", \"birth_date\": \"1993-06-06\"}, ] owners = [] for data in owners_data: try: user = User.objects.create_user( username=data[\"last_name\"] + data[\"first_name\"], password=\"password123\", email=f'{data[\"first_name\"].lower()}@example.com' ) owner = Owner.objects.create( user=user, last_name=data[\"last_name\"], first_name=data[\"first_name\"], birth_date=data[\"birth_date\"] ) owners.append(owner) except Exception as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430: {e}\") continue cars_data = [ {\"license_plate\": \"A123BC\", \"brand\": \"Toyota\", \"model\": \"Camry\", \"color\": \"\u0411\u0435\u043b\u044b\u0439\"}, {\"license_plate\": \"B456CD\", \"brand\": \"Honda\", \"model\": \"Civic\", \"color\": \"\u0427\u0435\u0440\u043d\u044b\u0439\"}, {\"license_plate\": \"C789DE\", \"brand\": \"BMW\", \"model\": \"X5\", \"color\": \"\u0421\u0438\u043d\u0438\u0439\"}, {\"license_plate\": \"D012EF\", \"brand\": \"Mercedes\", \"model\": \"C-Class\", \"color\": \"\u0421\u0435\u0440\u0435\u0431\u0440\u0438\u0441\u0442\u044b\u0439\"}, {\"license_plate\": \"E345FG\", \"brand\": \"Lada\", \"model\": \"Granta\", \"color\": \"\u041a\u0440\u0430\u0441\u043d\u044b\u0439\"}, {\"license_plate\": \"F678GH\", \"brand\": \"Ford\", \"model\": \"Focus\", \"color\": \"\u0417\u0435\u043b\u0435\u043d\u044b\u0439\"}, ] cars = [] for data in cars_data: try: car = Car.objects.create(**data) cars.append(car) except Exception as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f: {e}\") continue for owner in owners: try: License.objects.create( owner=owner, number=f\"{randint(100000, 999999)}\", type=choice([\"A\", \"B\", \"C\"]), date_of_issue=now() ) assigned_cars = [choice(cars) for _ in range(randint(1, 3))] for car in assigned_cars: Owning.objects.create( owner=owner, car=car, start_date=now(), end_date=None ) except Exception as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 {owner}: {e}\") \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0435\u0440\u0435\u0437 shell, \u0447\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043b\u043e\u0441\u044c \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0414\u043e\u0431\u0430\u0432\u0438\u043b\u0430 related_names \u0432 \u043c\u043e\u0434\u0435\u043b\u044c. 1. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \"Toyota\" : 2. \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"\u0410\u043d\u043d\u0430\" : 3. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c id \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043d\u0430\u0439\u0442\u0438 \u0435\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 : 4. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u0438 \u0437\u0435\u043b\u0435\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d : 5. \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 : \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3. \u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 1) \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f 2) \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 3) \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f 4) \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 5) \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c .distinct() ) 3.2 \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b \u0434\u043b\u044f \u0441\u043a\u0438\u043b\u043b\u043e\u0432 class SkillSerializer(serializers.ModelSerializer): class Meta: model = Skill fields = \"__all__\" class SkillCreateSerializer(serializers.ModelSerializer): class Meta: model = Skill fields = ['title'] \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c view class SkillAPIView(APIView): def get(self, request): skills = Skill.objects.all() serializer = SkillSerializer(skills, many=True) return Response({\"Skills\": serializer.data}) class SkillCreateView(APIView): def post(self, request): skill = request.data.get(\"skill\") serializer = SkillCreateSerializer(data=skill) if serializer.is_valid(raise_exception=True): skill_saved = serializer.save() return Response({\"Success\": f\"Profession '{skill_saved.title}' created successfully.\"}) \u0418 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0443\u0442\u0438 \u0432 urls.py path('skills/', SkillAPIView.as_view()), path('skills/create/', SkillCreateView.as_view()), \u0418\u0442\u043e\u0433\u043e: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 1) \u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0439\u043d\u0430\u0445 \u0438 \u0438\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 (\u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435). \u041d\u0430\u043f\u0438\u0448\u0435\u043c serializer class WarriorWithProfessionSerializer(serializers.ModelSerializer): profession = ProfessionSerializer() skill = serializers.PrimaryKeyRelatedField(many=True, read_only=True) class Meta: model = Warrior fields = \"__all__\" \u041d\u0430\u043f\u0438\u0448\u0435\u043c view class WarriorWithProfessionListView(generics.ListAPIView): serializer_class = WarriorWithProfessionSerializer queryset = Warrior.objects.all() \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 urls path('warriors/with_professions/', WarriorWithProfessionListView.as_view()), 2) \u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0439\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0441\u043a\u0438\u043b\u0430\u0445 (\u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435). \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0443\u043d\u043a\u0442\u0443 1) class WarriorWithSkillsSerializer(serializers.ModelSerializer): skill = SkillSerializer(many=True) profession = serializers.PrimaryKeyRelatedField(read_only=True) class Meta: model = Warrior fields = \"__all__\" class WarriorWithSkillsListView(generics.ListAPIView): serializer_class = WarriorWithSkillsSerializer queryset = Warrior.objects.all() path('warriors/with_skills/', WarriorWithSkillsListView.as_view()), 3) \u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u043e\u0439\u043d\u0435 (\u043f\u043e id), \u0435\u0433\u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 \u0438 \u0441\u043a\u0438\u043b\u043b\u0430\u0445. \u041d\u0430\u043f\u0438\u0448\u0435\u043c serializer class WarriorWithSkillsAndProfessionSerializer(serializers.ModelSerializer): profession = ProfessionSerializer() skill = SkillSerializer(many=True) class Meta: model = Warrior fields = \"__all__\" \u041d\u0430\u043f\u0438\u0448\u0435\u043c view class WarriorDetailView(generics.RetrieveAPIView): serializer_class = WarriorWithSkillsAndProfessionSerializer queryset = Warrior.objects.all() lookup_field = 'id' \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 urls path('warriors/<int:id>/', WarriorDetailView.as_view()), 5) \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430 \u041d\u0430\u043f\u0438\u0448\u0435\u043c view class WarriorDeleteView(generics.DestroyAPIView): queryset = Warrior.objects.all() serializer_class = WarriorSerializer \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 urls path('warriors/delete/<int:pk>/', WarriorDeleteView.as_view()), 6) \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041d\u0430\u043f\u0438\u0448\u0435\u043c view class WarriorUpdateView(generics.RetrieveUpdateAPIView): queryset = Warrior.objects.all() serializer_class = WarriorSerializer \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 urls path('warriors/update/<int:pk>/', WarriorUpdateView.as_view()),","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430"},{"location":"lab3/practice/#31","text":"","title":"3.1"},{"location":"lab3/practice/#1","text":"\u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430 \u0441\u043a\u0440\u0438\u043f\u0442 import os import django os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project_Barkhatova.settings') django.setup() from random import choice, randint from django.utils.timezone import now from project_first_app.models import Owner, Car, License, Owning, User owners_data = [ {\"last_name\": \"\u0418\u0432\u0430\u043d\u043e\u0432\", \"first_name\": \"\u0418\u0432\u0430\u043d\", \"birth_date\": \"1985-01-01\"}, {\"last_name\": \"\u041f\u0435\u0442\u0440\u043e\u0432\", \"first_name\": \"\u041f\u0435\u0442\u0440\", \"birth_date\": \"1990-02-02\"}, {\"last_name\": \"\u0421\u0438\u0434\u043e\u0440\u043e\u0432\", \"first_name\": \"\u0421\u0438\u0434\u043e\u0440\", \"birth_date\": \"1982-03-03\"}, {\"last_name\": \"\u0421\u043c\u0438\u0440\u043d\u043e\u0432\", \"first_name\": \"\u0410\u043b\u0435\u043a\u0441\u0435\u0439\", \"birth_date\": \"1995-04-04\"}, {\"last_name\": \"\u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432\u0430\", \"first_name\": \"\u041c\u0430\u0440\u0438\u044f\", \"birth_date\": \"1988-05-05\"}, {\"last_name\": \"\u041f\u043e\u043f\u043e\u0432\u0430\", \"first_name\": \"\u0410\u043d\u043d\u0430\", \"birth_date\": \"1993-06-06\"}, ] owners = [] for data in owners_data: try: user = User.objects.create_user( username=data[\"last_name\"] + data[\"first_name\"], password=\"password123\", email=f'{data[\"first_name\"].lower()}@example.com' ) owner = Owner.objects.create( user=user, last_name=data[\"last_name\"], first_name=data[\"first_name\"], birth_date=data[\"birth_date\"] ) owners.append(owner) except Exception as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430: {e}\") continue cars_data = [ {\"license_plate\": \"A123BC\", \"brand\": \"Toyota\", \"model\": \"Camry\", \"color\": \"\u0411\u0435\u043b\u044b\u0439\"}, {\"license_plate\": \"B456CD\", \"brand\": \"Honda\", \"model\": \"Civic\", \"color\": \"\u0427\u0435\u0440\u043d\u044b\u0439\"}, {\"license_plate\": \"C789DE\", \"brand\": \"BMW\", \"model\": \"X5\", \"color\": \"\u0421\u0438\u043d\u0438\u0439\"}, {\"license_plate\": \"D012EF\", \"brand\": \"Mercedes\", \"model\": \"C-Class\", \"color\": \"\u0421\u0435\u0440\u0435\u0431\u0440\u0438\u0441\u0442\u044b\u0439\"}, {\"license_plate\": \"E345FG\", \"brand\": \"Lada\", \"model\": \"Granta\", \"color\": \"\u041a\u0440\u0430\u0441\u043d\u044b\u0439\"}, {\"license_plate\": \"F678GH\", \"brand\": \"Ford\", \"model\": \"Focus\", \"color\": \"\u0417\u0435\u043b\u0435\u043d\u044b\u0439\"}, ] cars = [] for data in cars_data: try: car = Car.objects.create(**data) cars.append(car) except Exception as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f: {e}\") continue for owner in owners: try: License.objects.create( owner=owner, number=f\"{randint(100000, 999999)}\", type=choice([\"A\", \"B\", \"C\"]), date_of_issue=now() ) assigned_cars = [choice(cars) for _ in range(randint(1, 3))] for car in assigned_cars: Owning.objects.create( owner=owner, car=car, start_date=now(), end_date=None ) except Exception as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 {owner}: {e}\") \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0435\u0440\u0435\u0437 shell, \u0447\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043b\u043e\u0441\u044c","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"lab3/practice/#2","text":"\u0414\u043e\u0431\u0430\u0432\u0438\u043b\u0430 related_names \u0432 \u043c\u043e\u0434\u0435\u043b\u044c. 1. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \"Toyota\" : 2. \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"\u0410\u043d\u043d\u0430\" : 3. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c id \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043d\u0430\u0439\u0442\u0438 \u0435\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 : 4. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u0438 \u0437\u0435\u043b\u0435\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d : 5. \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 :","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"lab3/practice/#3","text":"1) \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f 2) \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 3) \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f 4) \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 5) \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c .distinct() )","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3. \u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"lab3/practice/#32","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b \u0434\u043b\u044f \u0441\u043a\u0438\u043b\u043b\u043e\u0432 class SkillSerializer(serializers.ModelSerializer): class Meta: model = Skill fields = \"__all__\" class SkillCreateSerializer(serializers.ModelSerializer): class Meta: model = Skill fields = ['title'] \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c view class SkillAPIView(APIView): def get(self, request): skills = Skill.objects.all() serializer = SkillSerializer(skills, many=True) return Response({\"Skills\": serializer.data}) class SkillCreateView(APIView): def post(self, request): skill = request.data.get(\"skill\") serializer = SkillCreateSerializer(data=skill) if serializer.is_valid(raise_exception=True): skill_saved = serializer.save() return Response({\"Success\": f\"Profession '{skill_saved.title}' created successfully.\"}) \u0418 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0443\u0442\u0438 \u0432 urls.py path('skills/', SkillAPIView.as_view()), path('skills/create/', SkillCreateView.as_view()), \u0418\u0442\u043e\u0433\u043e:","title":"3.2"},{"location":"lab3/practice/#2_1","text":"1) \u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0439\u043d\u0430\u0445 \u0438 \u0438\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 (\u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435). \u041d\u0430\u043f\u0438\u0448\u0435\u043c serializer class WarriorWithProfessionSerializer(serializers.ModelSerializer): profession = ProfessionSerializer() skill = serializers.PrimaryKeyRelatedField(many=True, read_only=True) class Meta: model = Warrior fields = \"__all__\" \u041d\u0430\u043f\u0438\u0448\u0435\u043c view class WarriorWithProfessionListView(generics.ListAPIView): serializer_class = WarriorWithProfessionSerializer queryset = Warrior.objects.all() \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 urls path('warriors/with_professions/', WarriorWithProfessionListView.as_view()), 2) \u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0439\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0441\u043a\u0438\u043b\u0430\u0445 (\u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435). \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0443\u043d\u043a\u0442\u0443 1) class WarriorWithSkillsSerializer(serializers.ModelSerializer): skill = SkillSerializer(many=True) profession = serializers.PrimaryKeyRelatedField(read_only=True) class Meta: model = Warrior fields = \"__all__\" class WarriorWithSkillsListView(generics.ListAPIView): serializer_class = WarriorWithSkillsSerializer queryset = Warrior.objects.all() path('warriors/with_skills/', WarriorWithSkillsListView.as_view()), 3) \u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u043e\u0439\u043d\u0435 (\u043f\u043e id), \u0435\u0433\u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 \u0438 \u0441\u043a\u0438\u043b\u043b\u0430\u0445. \u041d\u0430\u043f\u0438\u0448\u0435\u043c serializer class WarriorWithSkillsAndProfessionSerializer(serializers.ModelSerializer): profession = ProfessionSerializer() skill = SkillSerializer(many=True) class Meta: model = Warrior fields = \"__all__\" \u041d\u0430\u043f\u0438\u0448\u0435\u043c view class WarriorDetailView(generics.RetrieveAPIView): serializer_class = WarriorWithSkillsAndProfessionSerializer queryset = Warrior.objects.all() lookup_field = 'id' \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 urls path('warriors/<int:id>/', WarriorDetailView.as_view()), 5) \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430 \u041d\u0430\u043f\u0438\u0448\u0435\u043c view class WarriorDeleteView(generics.DestroyAPIView): queryset = Warrior.objects.all() serializer_class = WarriorSerializer \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 urls path('warriors/delete/<int:pk>/', WarriorDeleteView.as_view()), 6) \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041d\u0430\u043f\u0438\u0448\u0435\u043c view class WarriorUpdateView(generics.RetrieveUpdateAPIView): queryset = Warrior.objects.all() serializer_class = WarriorSerializer \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 urls path('warriors/update/<int:pk>/', WarriorUpdateView.as_view()),","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"}]}